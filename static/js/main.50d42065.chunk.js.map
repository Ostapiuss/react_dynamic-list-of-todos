{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","selectValue","inputValue","handleChange","handleEvent","value","target","setState","todos","this","filter","todo","completed","title","includes","props","selectUser","stateUserId","visibleTodos","filteredTodos","className","type","placeholder","onChange","event","map","key","id","classnames","readOnly","userId","onClick","React","PureComponent","request","endPoint","Promise","resolve","reject","fetch","then","response","json","CurrentUser","user","loadUser","prevProps","a","data","name","email","phone","App","selectedUserId","result","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50d42065.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    selectValue: 'all',\n    inputValue: '',\n  };\n\n  handleChange = (handleEvent) => {\n    const { value } = handleEvent.target;\n\n    this.setState({\n      inputValue: value,\n    });\n  }\n\n  filteredTodos(todos) {\n    const { inputValue, selectValue } = this.state;\n\n    switch (selectValue) {\n      case 'Active':\n        return todos.filter(todo => todo.completed);\n      case 'Complited':\n        return todos.filter(todo => !(todo.completed));\n      default:\n        return todos.filter(todo => todo.title.includes(inputValue));\n    }\n  }\n\n  render() {\n    const { todos, selectUser, stateUserId } = this.props;\n\n    const visibleTodos = this.filteredTodos(todos);\n\n    return (\n      <>\n        <div className=\"TodoList\">\n          <h2>Todos:</h2>\n\n          <input\n            type=\"text\"\n            placeholder=\"Search by title\"\n            value={this.state.inputValue}\n\n            onChange={(event) => {\n              this.handleChange(event);\n            }}\n          />\n          <select onChange={(event) => {\n            this.setState({\n              selectValue: event.target.value,\n            });\n          }}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Complited\">Complited</option>\n          </select>\n\n          <div className=\"TodoList__list-container\">\n            <ul className=\"TodoList__list\">\n\n              {visibleTodos.map(todo => (\n                <>\n                  <li\n                    key={todo.id}\n                    className={classnames(\n                      'TodoList__item',\n                      { 'TodoList__item--checked': todo.completed },\n                      { 'TodoList__item--unchecked': !todo.completed },\n                    )}\n                  >\n                    <label>\n                      <input type=\"checkbox\" readOnly />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className={classnames('button', {\n                        'TodoList__user-button--selected':\n                        stateUserId === todo.userId,\n                      })}\n                      type=\"button\"\n                      onClick={() => {\n                        selectUser(todo.userId);\n                      }}\n                    >\n                      {`User# ${todo.userId}`}\n                    </button>\n                  </li>\n                </>\n\n              ))}\n            </ul>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nTodoList.propTypes = PropTypes.shape({\n  todos: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n  selectUser: PropTypes.func.isRequired,\n  stateUserId: PropTypes.number.isRequired,\n}).isRequired;\n","const BASE__URL = 'https://mate-api.herokuapp.com';\n\nexport const request = endPoint => new Promise((resolve, reject) => {\n  fetch(`${BASE__URL}${endPoint}`)\n    .then(response => resolve(response.json()));\n});\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({\n      user: user.data,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (<span>Loading data from server...</span>);\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email }</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"submit\"\n          className=\"CurrentUser__button\"\n          onClick={() => {\n            this.props.selectUser(null);\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = PropTypes.shape({\n  userId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n}).isRequired;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './api';\n\nclass App extends React.Component {\n  state = {\n    selectedUserId: null,\n\n    todos: [],\n  };\n\n  componentDidMount() {\n    request('/todos')\n      .then((result) => {\n        this.setState({\n          todos: result.data.filter(data => data.title),\n        });\n      });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            stateUserId={this.state.selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}